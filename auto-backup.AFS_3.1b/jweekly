#!/afs/awd/local/bin/perl

require 'open2.pl';

sub key_ready {
    local($rin, $nfd);
    vec($rin, fileno(STDIN), 1) = 1;
    return $nfd = select($rin,undef,undef,0);
} 

sub pipe_ready {
    local($rin,$nfd);
    vec($rin, fileno(RDR), 1) = 1;
    return $nfd = select($rin,undef,undef,0);
}

sub handler1 {    # 1st arguement is signal name
    local($sig) - @_;
    print "Caught a Sig$sig  \n";
    print "Ignoring this signal because already handling one\n";
    print WTR "\n";
    }

sub waitprompt {
#   print " waiting for prompt from backup\n";
    $aprompt = 0;
    $adump = 0;
    while($aprompt==0 && $adump==0) {
      $temp = &pipe_ready;
      if ($temp) {
        ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
              $atime,$mtime,$ctime,$blksize,$blocks)
                = stat(RDR);
        read(RDR, $_, $size);
        print LOG;
        print;
        if (/backup>/) { $aprompt = 1; }
	if (/Preparing to dump/) {
	   $adump = 1;
	   print"backup> ";
        }
      }
#   sleep 1;
    }
#   $/ = "backup>";
#   $input = <RDR>;
#   print $input;
#   print LOG $input;
#   $/ = "\n";
    print "Now leaving waitprompt\n";
    print LOG "Now leaving waitprompt\n";
}

sub sendcmd {   # Sends the cmd passed as arguement to the backup child
    local($COMMAND) = @_;
    print $COMMAND;             # Send to monitor
    print(WTR $COMMAND);        # Send to backup child
    print(LOG $COMMAND);        # Send to backup child
    &waitprompt;                # Wait for backup> prompt from child
    }

sub findfn {    # given a string as an arguement search for a filename
                # in the current directoru containing that string
    local($STRING) = @_;
      open(LS, "ls|") || die "can't run ls: $!";
      $found = 0;
      while($found == 0 && !eof(LS)) {
        $_ = <LS>;
        chop;
        if (/$STRING/) {
          $found = 1;
          close(LS);
          $Fname = $_;
        }
      }
      return($Fname);
    }

sub set {
    $continue = 1;
    }

sub runcmds {
    open(STUFF, $cmdfile) || die "Can't open @ARGV[0]: $!\n";
    $dayfnd = 0; $last = 0;
    while (($dayfnd == 0)&&(!eof(STUFF))) {
      $_ = <STUFF>;
      if (/$day/) { $dayfnd = 1;}
    }
    while (($last == 0)&&(!eof(STUFF))) {
      $_ = <STUFF>;
      if (/:/) {
        $last = 1;
      } else {
        if (/^B /) {         # This is a backup command
          s/^B //;
          $Bcmd = $_;
          if (/dump/) {
            ($volset, $dsched, $else) = /dump (\S+) (\S+) (.*)$/;
            if (m|/|) {
              print "this is an incremental\n";
              print LOG "this is an incremental\n";
                  &sendcmd($Bcmd);
            } else {           # This is a full backup
              print " this is a full backup\n";
              print LOG " this is a full backup\n";
              &sendcmd($Bcmd);
            }
          } else {
            &sendcmd($Bcmd);
          }
        } else {
          if (/^S /) {
            s/^S //;
            print"\n$_";
            print LOG "\n$_";
            system($_);
            print "backup> ";
          } else { print "Unknown command type: $_";}
        }
      }
    }
    close(STUFF);
    }

sub getjul {
    local($MON,$DAY,$YEAR) = @_;
    local($MONSTR,$JDAY);
    $MONSTR = "  JanFebMarAprMayJunJulAugSepOctNovDec";
    $BASEYR = 1990;
    %DAYS = ('Jan',0,'Feb',31,'Mar',59,'Apr',90,'May',120,
             'Jun',151,'Jul',181,'Aug',212,'Sep',243,'Oct',273,
             'Nov',304,'Dec',334);
    $JDAY = 365*($YEAR-$BASEYR);
    $JDAY += $DAYS{$MON};
    $JDAY += $DAY;
    return($JDAY);
    }

sub inthand {   # 1st arguement is signal name
    local($sig) = @_;
    print "Caught a SIG$sig \n";
    print LOG "Caught a SIG$sig \n";
    $temp = &key_ready;
    if ($temp) {
      $cmd = <STDIN>;
    }
    print "You can stack a command to the backup running\n";
    print LOG "You can stack a command to the backup running\n";
    print "Enter commnad > ";
    $cmd = <STDIN>;
    print WTR $cmd;
    chop($cmd);
    print LOG "The command $cmd will be sent to the backup process\n";
    print "The command $cmd will be sent to the backup process\n";
    }
sub handler {   # 1st argument is signal name
    local($sig) = @_;
    print "Caught a SIG$sig  \n";
    print LOG "Caught a SIG$sig  \n";
    $SIG{'ALRM'} = 'handler1';    # point to SIGALARM handler
    open(DAT, "date|") || die "can't run date: $!";
    $_ = <DAT>;
    ($day, $mon, $date, $hr, $min, $sec, $yr) =
      /(\w+) (\w+) (\d+) (\d+):(\d+):(\d+) (.*)$/;
    $yr =~ s/CDT//; $yr =~ s/ //;
    if ($today ne $day) {   # a new day run commands for day
      $^T = time;           # reset the scripts start time to now
      close(LOG);
      $file = $mon.$date."log";
      open(LOG,">>$file")|| die"can't open $file $!\n";
      &runcmds;
      $today = $day;
    } else {                # if file changed since last time run
      $continue = 0;        # the commands for day
      &set if -M @ARGV[0] < 0;
      if ($continue == 1) {
        $^T = time;         # reset the scripts start time to now
        &runcmds;
      } else {
        print"There have been no changes to input file since last run\n";
        print" backup > ";
        print LOG "There have been no changes to input file since last run\n";
      }
    }
    $SIG{'ALRM'} = 'handler';    # point to SIGALARM handler
}

sub findbk {
  $pscmd = "ps -ef";
  open(PS, "$pscmd|") || die "can't run $pscmd: $!";
  while($_ = <PS>) {
    if (/backup/) {
      ($usr, $pid, $else) =
        /(\D+) (\d+) (.*)$/;
    $_ = $else;
    if (/backup/) {
      print "There is another backup process running pid: $pid\n";
      }
    }
  }
  close(PS);
}

$| = 1;
&findbk;
$SIG{'ALRM'} = 'handler';    # point to SIGALARM handler
# $SIG{'INT'} = 'inthand';    # point to SIGALARM handler

open(DAT, "date|") || die "can't run date: $!";
$_ = <DAT>;
($day, $mon, $date, $hr, $min, $sec, $yr) =
  /(\w+) (\w+) (\d+) (\d+):(\d+):(\d+) (.*)$/;
$yr =~ s/CDT//; $yr =~ s/ //;
# print"today $today day $day T $^T \n";
$file = $day."log";
open(LOG,">>$file")|| die"can't open $file $!\n";

$backcmd = "/afs/awd/common/dev/src/afs32/rs_aix31/dest/etc/backup";
$child = &open2(RDR,WTR,$backcmd);
$/ = "\n";
sleep 5;
$pscmd = "ps -p$child";
$alive = 1;
$prompt = 1;

stat(@ARGV[0]);
if (-f _) {$cmdfile = @ARGV[0];
} else {
  print"Could not find file: @ARGV[0] \n";}

while ($alive) {
   open(PS, "$pscmd|") || die "can't run $pscmd: $!";
   while($_ = <PS>) {
     if (/$child/) {
       if(/defunct/) {
         $alive = 0;
         }
     }
   }
# sleep 1;
  if ($prompt) {
    $temp = &pipe_ready;
    if ($temp) {
      ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
            $atime,$mtime,$ctime,$blksize,$blocks)
              = stat(RDR);
      read(RDR, $_, $size);
      print LOG;
      print;
    }
    $temp = &key_ready;
    if ($temp) {
      $cmd = <STDIN>;
      print(WTR $cmd);
      print(LOG $cmd);
      $prompt = 0;
    }
  }
  else {
    ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
          $atime,$mtime,$ctime,$blksize,$blocks)
            = stat(RDR);
    read(RDR, $_, $size);
    print LOG;
    print;
    if (/backup>/) {
      $prompt = 1;
      print " ";
    }
  }
}
close(LOG);
print "end of program\n";
